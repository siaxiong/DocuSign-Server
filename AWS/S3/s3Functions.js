const {
    PutObjectCommand,
    GetObjectCommand,
    DeleteObjectCommand,
    ListObjectsCommand,
} = require("@aws-sdk/client-s3");
const {getSignedUrl} = require("@aws-sdk/s3-request-presigner");
const {s3Init, s3Client} = require("./s3Client");
/**
 * The above function is used to get the signed URL for uploading the resume to the S3 bucket.
 * @param token - The token that was generated by the backend.
 * @returns A signed URL that will allow the user to upload a file to the S3 bucket.
 */
const getUploadURL = async (token) => {
    const s3Client = s3Init(token);
    const bucketParams = {
        Bucket: "sxbucket22",
        Key: "Sia-Xiong-Resume.pdf",
    };

    const cmd = new PutObjectCommand(bucketParams).catch(err=>console.log(err));


    const signedURL = await getSignedUrl(s3Client, cmd, {
        expiresIn: 3600,
    }).catch(err=>console.log(err));
    return signedURL;
};


/**
 * It takes a token and a file name, initializes an S3 client, and
 * then deletes the file
 *
 * @param token - The token that was returned from the login function.
 * @param fileName - The name of the file you want to delete.
 * @returns The response from the delete command.
 */
const s3DeleteFile = async (token, fileName) => {
    const s3Client = s3Init(token);
    const bucketParams = {
        Bucket: "sxbucket22",
        Key: fileName,
    };
    const cmd = new DeleteObjectCommand(bucketParams).catch(err=>console.log(err));
    const response = await s3Client.send(cmd).catch(err=>console.log(err));
    return response;
};


/**
 * It takes a stream and returns a promise that resolves to a
 * base64 encoded string
 * @param stream - The stream to convert to a string.
 */
const streamToString = (stream) =>
    new Promise((resolve, reject) => {
        const chunks = [];
        stream.on("data", (chunk) => chunks.push(chunk));
        stream.on("error", reject);
        // eslint-disable-next-line max-len
        stream.on("end", () => resolve(Buffer.concat(chunks).toString("base64")));
    }).catch(err=>console.log(err));


/**
 * It takes a file name as an argument, and returns the file from the bucket.
 * @param fileName - The name of the file you want to get from the bucket.
 */
const s3GetSingleFile = async (fileName) => {
    const bucketParams = {
        Bucket: "sxbucket22",
        Key: fileName,
    };
    const cmd = new GetObjectCommand(bucketParams).catch(err=>console.log(err));
    const response = await s3Client.send(cmd).catch(err=>console.log(err));
    const base64 = await streamToString(response.Body);
    return base64;
};

/**
 * It returns a list of all the files in the bucket
 * @param email
 */
const s3GetAllFiles = async (email) => {
    const bucketParams = {
        Bucket: "sxbucket22",
        Prefix: email,
    };
    const cmd = new ListObjectsCommand(bucketParams).catch(err=>console.log(err));
    try {
        const response = await s3Client.send(cmd).catch(err=>console.log(err));
        if (!response.Contents) {
            console.log(response.Contents);
            return null;
        };
        const keyArr = response.Contents.map(item => item.Key);
        const base64FileArr = await Promise.all(keyArr.map(async key =>{
            const data = await s3GetFile(key);
            return {fileName: key, data};
        }));
        return base64FileArr;
    } catch (error) {
        console.log(error);
        return error;
    }
};


module.exports = {getUploadURL, s3DeleteFile, s3GetSingleFile, s3GetAllFiles};
