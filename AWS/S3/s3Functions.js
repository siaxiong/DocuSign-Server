const {
    PutObjectCommand,
    GetObjectCommand,
    DeleteObjectCommand,
    ListObjectsCommand,
} = require("@aws-sdk/client-s3");
const {getSignedUrl} = require("@aws-sdk/s3-request-presigner");
const {s3Init, s3Client} = require("./s3Client");


/**
 * The above function is used to get the signed URL for uploading the resume to the S3 bucket.
 * @param token - The token that was generated by the backend.
 * @returns A signed URL that will allow the user to upload a file to the S3 bucket.
 */
const getUploadURL = async (token) => {
    const s3Client = s3Init(token);

    const bucketParams = {
        Bucket: "sxbucket22",
        Key: "Sia-Xiong-Resume.pdf",
    };

    const cmd = new PutObjectCommand(bucketParams);

    const signedURL = await getSignedUrl(s3Client, cmd, {
        expiresIn: 3600,
    });
    console.log("ðŸš€ -----------------------------------------------------------------------------ðŸš€");
    console.log("ðŸš€ -> file: s3Functions.js -> line 29 -> getUploadURL -> signedURL", signedURL);
    console.log("ðŸš€ -----------------------------------------------------------------------------ðŸš€");

    return signedURL;
};


/**
 * It takes a token and a file name, initializes an S3 client, and
 * then deletes the file
 *
 * @param token - The token that was returned from the login function.
 * @param fileName - The name of the file you want to delete.
 * @returns The response from the delete command.
 */
const deleteFile = async (token, fileName) => {
    const s3Client = s3Init(token);

    const bucketParams = {
        Bucket: "sxbucket22",
        Key: fileName,
    };
    const cmd = new DeleteObjectCommand(bucketParams);
    const response = await s3Client.send(cmd);
    console.log("ðŸš€ -------------------------------------------------------------------------ðŸš€");
    console.log("ðŸš€ -> file: s3Functions.js -> line 51 -> deleteFile -> response", response);
    console.log("ðŸš€ -------------------------------------------------------------------------ðŸš€");
    return response;
};


/**
 * It takes a stream and returns a promise that resolves to a
 * base64 encoded string
 * @param stream - The stream to convert to a string.
 */
const streamToString = (stream) =>
    new Promise((resolve, reject) => {
        const chunks = [];
        stream.on("data", (chunk) => chunks.push(chunk));
        stream.on("error", reject);
        // eslint-disable-next-line max-len
        stream.on("end", () => resolve(Buffer.concat(chunks).toString("base64")));
    });


/**
 * It takes a file name as an argument, and returns the file from the bucket.
 * @param fileName - The name of the file you want to get from the bucket.
 */
const getFile = async (fileName) => {
    console.log("ðŸš€ ----------------------------------------------------------------------ðŸš€");
    console.log("ðŸš€ -> file: s3Functions.js -> line 75 -> getFile -> fileName", fileName);
    console.log("ðŸš€ ----------------------------------------------------------------------ðŸš€");
    const bucketParams = {
        Bucket: "sxbucket22",
        Key: fileName,
    };

    const cmd = new GetObjectCommand(bucketParams);
    const response = await s3Client.send(cmd);
    const base64 = await streamToString(response.Body);
    return base64;
};

/**
 * It returns a list of all the files in the bucket
 */
const getAllFiles = async () => {
    const bucketParams = {
        Bucket: "sxbucket22",
    };

    const cmd = new ListObjectsCommand(bucketParams);
    const response = await s3Client.send(cmd);

    const keyArr = response.Contents.map(item => item.Key);
    const base64FileArr = await Promise.all(keyArr.map(async key =>{
        const data = await getFile(key);
        return {fileName: key, data};
    }));

    return base64FileArr;
};


module.exports = {getUploadURL, deleteFile, getFile, getAllFiles};
